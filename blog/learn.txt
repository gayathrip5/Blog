// 1) <!-- rootpath constant is to stop error due to stepping out of folder..tootpath provides path to parent folder and check for required one -->
define('ROOT_PATH', realpath(dirname(__FILE__)));
The realpath() function returns the absolute pathname.

2)
var_dump() function dumps information about one or more variables. The information holds type and value of the variable(s)
var_dump(ROOT_PATH);

3)
define('BASE_URL', "http://localhost/blog" );
// we connect file using links ex register and login pages are linked to each other
// so to link to login with register we need to know where our register is?
// lets a login is on a folder then we provide path/folder/login.php... instead of using this we use shortcut using baseurl ..which points root folder of application


4) Reusable Database functions
we create once use them anytime
in database we either 
select 
update
delete
etc
so creating a reusable functions
if there is select oparation..if  we want to select anything 
we can pass them as parameter of selection
so here function is same but using again with changig parameter
select (topics)
select(posts)
create(topics)
create(posts) that way

4.1) connection with data base

1.The query() / mysqli_query() function performs a query against a database.


// Create database using MYSQLI procedural
$sql = "CREATE DATABASE myDB";
if (mysqli_query($conn, $sql)) {
  echo "Database created successfully";
} else {
  echo "Error creating database: " . mysqli_error($conn);
}

mysqli_close($conn);

// Create database using MYSQLI  object oriented
$sql = "CREATE DATABASE myDB";
if ($conn->query($sql) === TRUE) {
  echo "Database created successfully";
} else {
  echo "Error creating database: " . $conn->error;
}

$conn->close();

4.2)selection

$sql = "SELECT * FROM users";
//Prepared statements are very useful against SQL injections
$stnt = $conn->prepare($sql);
$stnt->execute();
$users = $stnt->get_result()->fetch_all(MYSQLI_ASSOC);
var_dump($users);

A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency.

Prepared statements basically work like this:

Prepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled "?"). Example: INSERT INTO MyGuests VALUES(?, ?, ?)
The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it
Execute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values

note: usage of prepare

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// prepare and bind
$stmt = $conn->prepare("INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)");
$stmt->bind_param("sss", $firstname, $lastname, $email);

// set parameters and execute
$firstname = "John";
$lastname = "Doe";
$email = "john@example.com";
$stmt->execute();

$firstname = "Mary";
$lastname = "Moe";
$email = "mary@example.com";
$stmt->execute();

$firstname = "Julie";
$lastname = "Dooley";
$email = "julie@example.com";
$stmt->execute();

echo "New records created successfully";

$stmt->close();
$conn->close();
?>

Compared to executing SQL statements directly, prepared statements have three main advantages:

Prepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times)
Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query
Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.


// 1) selection code explaination
$sql = "SELECT * FROM users";
// 2)Prepared statements are very useful against SQL injections
$stnt = $conn->prepare($sql);
$stnt->execute();
$users = $stnt->get_result()->fetch_all(MYSQLI_ASSOC);
// var_dump($users); instead use print_r there will be little difference in displaying output
// between vardump and print_r
echo "<pre>",print_r($users),"</pre>";

5) selection with conditions
//for printing
function dd($values){
    echo "<pre>",print_r($values,true),"</pre>";
    die();
}

function selectAll($table ,$conditions=[])
{
global $conn;
$sql = "SELECT * FROM $table";

if(empty($conditions))
 {
        $stnt = $conn->prepare($sql);
        $stnt->execute();
        $records = $stnt->get_result()->fetch_all(MYSQLI_ASSOC);
        return $records;
}
else{
    //return records that matches the conditions
     // $sql= "SELECT * FROM $table WHERE username='sunshine' AND admin=1"; but to change dynamically
     $i=0;
    foreach($conditions as $key => $value){
        if($i==0){
            $sql=$sql . " WHERE $key=$value";
        }
        else{
            $sql=$sql . " AND $key=$value";
        }
        $i++;
    }
    dd($sql);
}

}


$conditions =[
    'admin'=>1,
    'username'=>"sunshine"
];

$users =selectAll('users',$conditions);
dd($users);
